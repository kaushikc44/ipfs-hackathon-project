// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class File extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save File entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type File must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("File", id.toString(), this);
    }
  }

  static load(id: string): File | null {
    return changetype<File | null>(store.get("File", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cid(): string {
    let value = this.get("cid");
    return value!.toString();
  }

  set cid(value: string) {
    this.set("cid", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get fileType(): string {
    let value = this.get("fileType");
    return value!.toString();
  }

  set fileType(value: string) {
    this.set("fileType", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get updateAt(): string {
    let value = this.get("updateAt");
    return value!.toString();
  }

  set updateAt(value: string) {
    this.set("updateAt", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get files(): Array<string> | null {
    let value = this.get("files");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set files(value: Array<string> | null) {
    if (!value) {
      this.unset("files");
    } else {
      this.set("files", Value.fromStringArray(<Array<string>>value));
    }
  }
}
